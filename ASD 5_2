#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <set>

#define infinity 10000000

using namespace std;

class Mission
{
public:
    int city_beg,city_end,time;

    friend ostream & operator<< (ostream &output, const Mission &m);
};

ostream & operator<< (ostream &output, const Mission &m)
{
    return output << m.city_beg<<" "<<m.city_end<<" "<<m.time;
}

class City
{
public:
    int road=infinity;
    vector <int> previous;
    vector <int> cost; //z poprzednika do tego miasta
    vector <int> next;
    bool checked=false;

    City () {};
};

int main()
{

    fstream input_file;
    //cout << "Podaj nazwe pliku" << endl;
    //string name;
    //cin>>name;

    //input_file.open(name,std::ios::in|std::ios::out);
    input_file.open("in3.txt",std::ios::in|std::ios::out);

    if (!input_file)
    {
        cout<<"Nie udalo sie otworzyc pliku! Nastapi zamkniecie programu.";
        return -1;
    }
    fstream output_file;
    output_file.open("Odpowiedz.txt",std::ios::out);

    if (!output_file)
    {
        cout<<"Nie udalo sie utworzyc pliku Odpowiedz.txt!Nastapi zamkniecie programu.";
        return -1;
    }

    int hipercities, corridors, tunels;

    input_file>>hipercities;
    input_file>>corridors;
    input_file>>tunels;

    Mission tab[corridors];

    City cities[hipercities+1];

    for (int i=0; i<corridors; i++)
    {
        input_file>>tab[i].city_beg;
        input_file>>tab[i].city_end;
        input_file>>tab[i].time;
        cities[tab[i].city_beg].next.push_back(tab[i].city_end);
        cities[tab[i].city_end].previous.push_back(tab[i].city_beg);
        cities[tab[i].city_end].cost.push_back(tab[i].time);

    }

    vector<int>::iterator previous_iter;
    vector<int>::iterator next_iter;
    auto temp_iter  = cities[2].previous.begin();
    vector<int>::iterator cost_iter;
    output_file<<endl;

    cities[1].road=0; //bo z miasta 1 do 1 podroz nic nie trwa
    output_file<<"   1 ";

    vector <int> answer(hipercities,0);

    for (int i=2; i<=hipercities; i++) //bo z miasta 1 do miasta 1 nie ma sensu sprawdzac
    {
        previous_iter=cities[i].previous.begin();
        cost_iter=cities[i].cost.begin();

        while (previous_iter!=cities[i].previous.end())
        {
            if ((cities[i].road)>((cities[*previous_iter].road)+(*cost_iter)))
            {
                if (*cost_iter==0)
                {
                    if (tunels!=0)
                    {
                        cities[i].road=((cities[*previous_iter].road)+(*cost_iter));
                        temp_iter=previous_iter;
                        tunels--;
                        cout<<"tunel ";
                    }
                }
                else
                {
                    cities[i].road=((cities[*previous_iter].road)+(*cost_iter));
                    temp_iter=previous_iter;
                }
            }
            previous_iter++;
            cost_iter++;

        }

        // if (cities[*temp_iter].checked==false)
        //  {
        //       answer.push_back(*temp_iter);
        //  }
        cities[*temp_iter].checked=true;
    }


    int best=infinity;
    auto ans1=answer.rbegin();

    for (int i=hipercities; i>=2; i--)
    {

        previous_iter=cities[i].previous.begin();
        while (previous_iter!=cities[i].previous.end())
        {
            cout<<"Poprzednik miasta "<<i<<" to "<<*previous_iter<<" z droga "<<cities[*previous_iter].road<<endl;
            if (best>cities[*previous_iter].road)
            {
                best=cities[*previous_iter].road;
                temp_iter=previous_iter;

            }
            previous_iter++;

        }
        ans1=answer.rbegin();
        if (*temp_iter!=*ans1) answer.push_back(*temp_iter);
    }




auto ans=answer.rbegin();

    while (!answer.empty())
    {
        if (*ans!=0) output_file<<*ans<<" ";
        answer.pop_back();
        ans++;
    }

    output_file<<hipercities;
    output_file.seekg( 0 );
    output_file<<cities[hipercities].road<<endl; //droga do ostatniego miasta
    cout<<endl<<"Poprawnie zapisano odpowiedz do pliku Odpowiedz.txt"<<endl;
    output_file.close();
    input_file.close();
    return 0;

}
