#include <iostream>
#include <vector>
#include <utility>
#include <set>
#include <fstream>
#define INF 10000000

using namespace std;


vector< pair<int,int> > *cities;
vector<int> proximity;

void dijkstra(int numb_of_hipercities)
{
    proximity.assign(numb_of_hipercities,INF); //odleglosci na nieskonczonosc...
    proximity[0] = 0; //..ale z miasta 1 do samego siebie na 0
    set<pair<int,int>> Q; //miasto,odleglosc
    Q.insert({0,0});
    while(!Q.empty())
    {
        auto top = Q.begin();
        int city = top->second;
        Q.erase(top);
        for(auto next: cities[city])
        {
            int next_city = next.first, road = next.second;
            if( proximity[next_city] > proximity[city] + road)
            {
                if(Q.find( {proximity[next_city], next_city} ) != Q.end())
                    Q.erase(Q.find( {proximity[next_city], next_city} ));
                proximity[next_city] = proximity[city] + road;
                Q.insert( {proximity[next_city], next_city} );
            }
        }
    }
}

int main()
{

    fstream input_file;
    input_file.open("in3.txt",std::ios::in|std::ios::out);

    if (!input_file)
    {
        cout<<"Nie udalo sie otworzyc pliku! Nastapi zamkniecie programu.";
        return -1;
    }
    fstream output_file;
    output_file.open("Odpowiedz.txt",std::ios::out);

    if (!output_file)
    {
        cout<<"Nie udalo sie utworzyc pliku Odpowiedz.txt!Nastapi zamkniecie programu.";
        return -1;
    }

    int hipercities, corridors, tunels,start,finish,cost;

    input_file>>hipercities;
    input_file>>corridors;
    input_file>>tunels;

    cities = new vector< pair<int,int> >[hipercities];

    for(int i=0; i<corridors; i++)
    {
        input_file>>start>>finish>>cost;
        start--;
        finish--;
        //bo miasta numerowane sa w pliku in od 1 (!!!)
        cities[start].push_back({finish,cost});
        cities[finish].push_back({start,cost});
    }

    dijkstra(hipercities);

    for(int i=0; i<hipercities; i++)
    {
        cout<<"Miasto:"<<i+1<<" Odleglosc:"<<proximity[i]<<" ";
        cout<<endl;

    }

   // auto ans=cities[0].first;

   // while (ans.first!=hipercities)
   // {
   //     cout<<ans;
    //    ans=cities[ans].first;

 //   }


    return 0;
}
