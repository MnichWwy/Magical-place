#include <iostream>
#include <string>
#include <cstdlib>
#include <stdlib.h>
#include <fstream>
using namespace std;

string cr,cl,cp;
fstream input_file,output_file;

int value;


struct AVL
{
public:
    AVL * up;
    AVL * left;
    AVL * right;
    string key;
    int bf;
};

class File_Commands
{
public:
    char type;
    string number1;
    string number2;

};

AVL  * root = NULL;
void printTree(string sp, string sn, AVL * v);
void deleteTree(AVL* v);
void RR(AVL * & root, AVL * A);
void LL(AVL * & root, AVL * A);
void RL(AVL * & root, AVL * A);
void LR(AVL * & root, AVL * A);
void insertNode(AVL * & root, string k);
AVL * previousNode(AVL * p);
AVL * findNode(AVL * p, string k);
AVL * deleteNode(AVL * & root, AVL * x);
void howManyBetween(AVL * v,string from,string to);
void menu();


int main()
{

    menu();

    input_file.close();
    output_file.close();
    deleteTree(root);
    return 0;
}

void printTree(string sp, string sn, AVL * v)
{
    string s;

    if(v)
    {
        s = sp;
        if(sn == cr) s[s.length() - 2] = ' ';
        printTree(s + cp, cr, v->right);

        s = s.substr(0,sp.length()-2);
        cout << s << sn << v->key << ":" << v->bf << endl;

        s = sp;
        if(sn == cl) s[s.length() - 2] = ' ';
        printTree(s + cp, cl, v->left);
    }
}

void deleteTree(AVL * v)
{
    if(v)
    {
        deleteTree(v->left);
        deleteTree(v->right);
        delete v;
    }
}

void RR(AVL * & root, AVL * A)
{
    AVL * B = A->right, * p = A->up;

    A->right = B->left;
    if(A->right) A->right->up = A;

    B->left = A;
    B->up = p;
    A->up = B;

    if(p)
    {
        if(p->left == A) p->left = B;
        else p->right = B;
    }
    else root = B;

    if(B->bf == -1) A->bf = B->bf = 0;
    else
    {
        A->bf = -1;
        B->bf = 1;
    }
}

void LL(AVL * & root, AVL * A)
{
    AVL * B = A->left, * p = A->up;

    A->left = B->right;
    if(A->left) A->left->up = A;

    B->right = A;
    B->up = p;
    A->up = B;

    if(p)
    {
        if(p->left == A) p->left = B;
        else p->right = B;
    }
    else root = B;

    if(B->bf == 1) A->bf = B->bf = 0;
    else
    {
        A->bf = 1;
        B->bf = -1;
    }
}

void RL(AVL * & root, AVL * A)
{
    AVL * B = A->right, * C = B->left, * p  = A->up;

    B->left = C->right;
    if(B->left) B->left->up = B;

    A->right = C->left;
    if(A->right) A->right->up = A;

    C->left = A;
    C->right = B;
    A->up = B->up = C;
    C->up = p;

    if(p)
    {
        if(p->left == A) p->left = C;
        else p->right = C;
    }
    else root = C;

    if(C->bf == -1) A->bf =  1;
    else A->bf = 0;
    if(C->bf ==  1) B->bf = -1;
    else B->bf = 0;

    C->bf = 0;
}

void LR(AVL * & root, AVL * A)
{
    AVL * B = A->left, * C = B->right, * p = A->up;

    B->right = C->left;
    if(B->right) B->right->up = B;

    A->left = C->right;
    if(A->left) A->left->up = A;

    C->right = A;
    C->left = B;
    A->up = B->up = C;
    C->up = p;

    if(p)
    {
        if(p->left == A) p->left = C;
        else p->right = C;
    }
    else root = C;

    if(C->bf ==  1) A->bf = -1;
    else A->bf = 0;
    if(C->bf == -1) B->bf =  1;
    else B->bf = 0;

    C->bf = 0;
}

void insertNode(AVL * & root, string k)
{
    AVL* w,* p,* r;
    bool t;

    w = new AVL;        // tworzymy dynamicznie nowy wêze³
    w->left = w->right = w->up = NULL;
    w->key  = k;
    w->bf  = 0;

    //----------------------------------------
    // FAZA 1 - wstawienie wêz³a do drzewa AVL
    //----------------------------------------

    p = root;              // rozpoczynamy od korzenia

    if(!p) root = w;       // jeœli drzewo jest puste, to wêze³ w umieszczamy w korzeniu
    else
    {
        // inaczej szukamy miejsce dla w
        while(true)
            if(k < (p->key))     // porównujemy klucze
            {
                if(!p->left)     // jeœli p nie posiada lewego syna, to
                {
                    p->left = w;   // lewym synem p staje siê wêze³ w
                    break;         // wychodzimy z pêtli
                }
                p = p->left;     // inaczej przechodzimy do lewego syna
            }
            else
            {
                if(!p->right)    // jeœli p nie posiada prawego syna, to
                {
                    p->right = w;  // prawym synem staje siê wêze³ w
                    break;         // wychodzimy z pêtli
                }
                p = p->right;    // inaczej przechodzimy do prawego syna
            }

        w->up = p;           // ojcem w jest p

        //---------------------------------
        // FAZA 2 - równowa¿enie drzewa AVL
        //---------------------------------

        if(p->bf) p->bf = 0; // UWAGA NR 1
        else
        {
            if(p->left == w)   // UWAGA NR 2
                p->bf = 1;
            else
                p->bf = -1;

            r = p->up;        // bêdziemy szli w górê drzewa w kierunku korzenia
            // r i p wskazuj¹ ojca i syna na tej œcie¿ce
            t = false;
            while(r)
            {
                if(r->bf)
                {
                    t = true;     // ustalamy wynik pêtli
                    break;        // przerywamy pêtlê
                };
                // inaczej modyfikujemy r.bf
                if(r->left == p) r->bf =  1;
                else             r->bf = -1;

                p = r;          // przechodzimy w górê na wy¿szy poziom
                r = r->up;
            }

            if(t)             // jeœli r.bf = +/- 1, to musimy
            {
                // równowa¿yæ drzewo
                if(r->bf == 1)
                {
                    if(r->right == p) r->bf = 0;  // ga³êzie siê równowa¿¹
                    else if(p->bf == -1) LR(root,r);
                    else                 LL(root,r);
                }
                else
                {
                    // r.bf = -1
                    if(r->left == p) r->bf = 0;  // ga³êzie siê równowa¿¹
                    else if(p->bf == 1) RL(root,r);
                    else                RR(root,r);
                }
            }
        }
    }
}

AVL * previousNode(AVL * p)
{
    AVL * r;

    if(p)
    {
        if(p->left)
        {
            p = p->left;
            while(p->right) p = p->right;
        }
        else
            do
            {
                r = p;
                p = p->up;
            }
            while(p && p->right != r);
    }
    return p;
}

AVL * findNode(AVL * p, string k)
{
    while(p && p->key != k)
        p = (k < p->key) ? p->left: p->right;

    return p;
}

AVL * deleteNode(AVL * & root, AVL * x)
{
    AVL  *t,*y,*z;
    bool nest;

    if(x->left && x->right)
    {
        y    = deleteNode(root,previousNode(x));
        nest = false;
    }
    else
    {
        if(x->left)
        {
            y = x->left;
            x->left = NULL;
        }
        else
        {
            y = x->right;
            x->right = NULL;
        }
        x->bf = 0;
        nest  = true;
    }

    if(y)
    {
        y->up    = x->up;
        y->left  = x->left;
        if(y->left)  y->left->up  = y;
        y->right = x->right;
        if(y->right)  y->right->up = y;
        y->bf    = x->bf;
    }

    if(x->up)
    {
        if(x->up->left == x) x->up->left = y;
        else x->up->right = y;
    }
    else root = y;

    if(nest)
    {
        z = y;
        y = x->up;
        while(y)
        {
            if(!y->bf)
            {
                // Przypadek nr 1
                if(y->left == z)  y->bf = -1;
                else y->bf = 1;
                break;
            }
            else
            {
                if(((y->bf == 1) && (y->left == z)) || ((y->bf == -1) && (y->right == z)))
                {
                    // Przypadek nr 2
                    y->bf = 0;
                    z = y;
                    y = y->up;
                }
                else
                {
                    if(y->left == z)  t = y->right;
                    else t = y->left;
                    if(!t->bf)
                    {
                        // Przypadek 3A
                        if(y->bf == 1) LL(root,y);
                        else RR(root,y);
                        break;
                    }
                    else if(y->bf == t->bf)
                    {
                        // Przypadek 3B
                        if(y->bf == 1) LL(root,y);
                        else RR(root,y);
                        z = t;
                        y = t->up;
                    }
                    else
                    {
                        // Przypadek 3C
                        if(y->bf == 1) LR(root,y);
                        else RL(root,y);
                        z = y->up;
                        y = z->up;
                    }
                }
            }
        }
    }
    return x;
}

void menu()
{
    int more=1,wybor;
    output_file.open("Odpowiedz.txt",fstream::out);

    if (!output_file)
    {
        cout<<"Nie udalo sie otworzyc pliku!Nastapi zamkniecie programu.";
        exit(-1);
    }
    cr = cl = cp = "  ";
    cr[0] = 218;
    cr[1] = 196;
    cl[0] = 192;
    cl[1] = 196;
    cp[0] = 179;

    while(more==1)
    {



        system("cls");
        cout<<"     MENU     "<<endl;
        cout<<"1.Dodaj element"<<endl<<"2.Usun element"<<endl<<"3.Wyszukaj element"<<endl<<"4.Ilosc liczb z zadanego przedzialu"<<endl;
        cout<<"5.Wyswietl drzewo"<<endl<<"6.Wykonaj ciag polecen z pliku"<<endl<<"7.Wyjdz"<<endl;
        do
        {
            cout<<"Wybor:";
            cin>>wybor;
        }
        while ((wybor!=1)&&(wybor!=2)&&(wybor!=3)&&(wybor!=4)&&(wybor!=5)&&(wybor!=6)&&(wybor!=7));
        if (wybor==7) exit(0);

        switch(wybor)
        {
        case (1):
        {


            string tmp;
            bool ok;
            do
            {
                ok=true;
                cout<<endl<<"Podaj liczbe calkowita do dodania:";
                cin>>tmp;

                for (int i=0; i<tmp.length(); i++)
                {
                    if (tmp.length()>100)
                    {
                        cout<<"Liczba za dluga!";
                        ok=false;
                        break;
                    }

                    if ((tmp[i]<'0')||(tmp[i]>'9'))
                    {
                        cout<<endl<<"Podaj prawidlowa liczbe!"<<endl;
                        ok=false;
                        break;
                    }
                }
            }
            while (ok==false);
            insertNode(root,tmp);
            break;
        }
        case (2):
        {
            bool ok=true;
            string tmp;

            do
            {


                cout<<endl<<"Podaj liczbe calkowita do usuniecia:";
                cin>>tmp;

                for (int i=0; i<tmp.length(); i++)
                {
                    if (tmp.length()>100)
                    {
                        cout<<"Liczba za dluga!";
                        ok=false;
                        break;
                    }

                    if ((tmp[i]<'0')||(tmp[i]>'9'))
                    {
                        cout<<endl<<"Podaj prawidlowa liczbe!"<<endl;
                        ok=false;
                        break;
                    }
                }

            }
            while (ok==false);

            AVL * tmp2=findNode(root,tmp);

            if (tmp2==NULL)
            {
                cout<<endl<<"Drzewo nie zawiera takiej liczby!"<<endl;
                break;

            }
            deleteNode(root,tmp2);
            break;
        }
        case (3):
        {
            string tmp;
            bool ok;
            do
            {
                ok=true;
                cout<<endl<<"Podaj liczbe calkowita, ktorej szukasz:";
                cin>>tmp;

                for (int i=0; i<tmp.length(); i++)
                {
                    if (tmp.length()>100)
                    {
                        cout<<"Liczba za dluga!";
                        ok=false;
                        break;
                    }

                    if ((tmp[i]<'0')||(tmp[i]>'9'))
                    {
                        cout<<endl<<"Podaj prawidlowa liczbe!"<<endl;
                        ok=false;
                        break;
                    }
                }
            }
            while (ok==false);


            AVL * tmp2=findNode(root,tmp);

            if (tmp2==NULL)
            {

                cout<<"NIE"<<endl;
                break;

            }
            cout<<"TAK"<<endl;
            break;
        }
        case (4):
        {
            howManyBetween(root,"2","4");
            break;
        }
        case (5):
        {
            printTree("","",root);
            break;
        }
        case (6):
        {
            //  cout << "Podaj nazwe pliku" << endl;
            string nazwa;
            // cin>>nazwa;

            input_file.open("test.txt",std::ios::in|std::ios::out);

            if (!input_file)
            {
                cout<<"Nie udalo sie otworzyc pliku!Nastapi zamkniecie programu.";
                exit(-1);
            }
            int commands;
            input_file>>commands;

            File_Commands commands_array[commands+1];

            for (int i=0; i<commands+1; i++)
            {

                input_file>>commands_array[i].type;
                input_file>>commands_array[i].number1;

                if (commands_array[i].type=='L') input_file>>commands_array[i].number2;

                cout<<commands_array[i].type<<" "<<commands_array[i].number1<<"      "<<commands_array[i].number2<<endl;
            }

            cout<<"dlugosc"<<commands_array[5].number1.length();


            for(int i=0; i<commands+1; i++)
            {
                switch (commands_array[i].type)
                {
                case('W'):
                {
                    cout<<"dlugosc"<<commands_array[i].number1.length();
                    insertNode(root,commands_array[i].number1);
                    break;
                }
                case('U'):
                {
                    AVL * tmp2=findNode(root,commands_array[i].number1);

                    if (tmp2==NULL)
                    {
                        cout<<endl<<"Drzewo nie zawiera takiej liczby!"<<endl;
                        break;

                    }
                    deleteNode(root,tmp2);
                    break;
                }
                case('S'):
                {
                    AVL * tmp2=findNode(root,commands_array[i].number1);

                    if (tmp2==NULL)
                    {

                        output_file<<"NIE"<<endl;
                        break;

                    }
                    output_file<<"TAK"<<endl;
                   break;
                }
                case('L'):
                {
                    value=0;
                    howManyBetween(root,commands_array[i].number1,commands_array[i].number2);
                    output_file<<value<<endl;
                    break;
                }
                }
            }

            break;
        }
        }
        cout<<endl<<endl<<"Chcesz zrobic cos jeszcze (1-tak/0-nie) ?"<<endl<<"Wybor:";
        cin>>more;
    }
    while ((more!=1)&&(more!=0));
    return;

}

void howManyBetween(AVL * v,string from,string to)
{
int tmp1,tmp2,tmp3,i;
    if(v)
    {cout<<"key od v"<<v->key<<endl;
        if ((v->key.length()<=to.length())&&(v->key.length()>=from.length()))
        {

        for (i=0;i<(v->key.length());i++)
        {
            tmp1=v->key[i]-'0';
            tmp2=from[i]-'0';
            tmp3=to[i]-'0';

            if ((tmp1>tmp3)||(tmp1<tmp2)) {break;}

        }
            if (i==v->key.length()-1) value++;
            }

        cout<<endl<<"licznik glupiego wojciecha:"<<value<<endl;
        howManyBetween(v->left,from,to);      // przechodzimy lewe poddrzewo
        howManyBetween(v->right,from,to);     // przechodzimy prawe poddrzewo
    }

    return;
}
