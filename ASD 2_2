#include <iostream>
#include <fstream>
#include <string>

using namespace std;

class Cela
{
public:
    int glebokosc_sufitu;
    bool odwiedzono=false;
    Cela() {};
    Cela(int glebokosc_sufitu_)
    {
        glebokosc_sufitu=glebokosc_sufitu_;
    }

};

Cela** wiezienie;
int ilosc_wody=1; //bo minimum 1 m3 jest potrzebny, aby wiezien sie utopil we wlasnej celi
int x_wiezien,y_wiezien,x,y;


void czy_odwiedzone( int x_poprzedniej, int y_poprzedniej,int x_aktualnej , int y_aktualnej)
{
    if ((x_aktualnej<1)||(y_aktualnej<1)||(x_aktualnej>=(x+1))||(y_aktualnej>=(y+1))) return;

    if (wiezienie[x_aktualnej][y_aktualnej].odwiedzono==true) return; //jesli juz sprawdzono cele to nie nalezy jej sprawdzac po raz drugi

    wiezienie[x_aktualnej][y_aktualnej].odwiedzono=true;

    if (((wiezienie[x_wiezien][y_wiezien].glebokosc_sufitu)-(wiezienie[x_aktualnej][y_aktualnej].glebokosc_sufitu))<0) return; //jesli aktualna cela jest wyzej od celi wieznia to woda tu nie wleci

    if (((wiezienie[x_aktualnej][y_aktualnej].glebokosc_sufitu)-(wiezienie[x_poprzedniej][y_poprzedniej].glebokosc_sufitu))>4) return; //czy woda sie przeleje

    if (((wiezienie[x_aktualnej][y_aktualnej].glebokosc_sufitu)-(wiezienie[x_poprzedniej][y_poprzedniej].glebokosc_sufitu))<(-4)) return; //j.w.

    cout<<ilosc_wody<<"      "<<(wiezienie[x_aktualnej][y_aktualnej].glebokosc_sufitu)-(wiezienie[x_wiezien][y_wiezien].glebokosc_sufitu)<<endl;

    ilosc_wody=ilosc_wody+(wiezienie[x_aktualnej][y_aktualnej].glebokosc_sufitu)-(wiezienie[x_wiezien][y_wiezien].glebokosc_sufitu)+1;

    czy_odwiedzone(x_aktualnej, y_aktualnej, x_aktualnej+1,y_aktualnej); //dol

    czy_odwiedzone(x_aktualnej, y_aktualnej, x_aktualnej,y_aktualnej+1); //prawa

    czy_odwiedzone(x_aktualnej, y_aktualnej, x_aktualnej+1,y_aktualnej+1); //prawy dolny skos

    czy_odwiedzone(x_aktualnej, y_aktualnej, x_aktualnej-1,y_aktualnej); //gora

    czy_odwiedzone(x_aktualnej, y_aktualnej, x_aktualnej,y_aktualnej-1); //lewa

    czy_odwiedzone(x_aktualnej, y_aktualnej, x_aktualnej-1,y_aktualnej-1); //lewy gorny skos

    czy_odwiedzone(x_aktualnej, y_aktualnej, x_aktualnej+1,y_aktualnej-1); //lewy dolny skos

    czy_odwiedzone(x_aktualnej, y_aktualnej, x_aktualnej-1,y_aktualnej+1); // prawy gorny skos



}


int main()
{

    fstream plik_wejsciowy;
    cout << "Podaj nazwe pliku" << endl;
    string nazwa;
    cin>>nazwa;

    plik_wejsciowy.open(nazwa,std::ios::in|std::ios::out);

    if (!plik_wejsciowy)
    {
        cout<<"Nie udalo sie otworzyc pliku!Nastapi zamkniecie programu.";
        return -1;
    }

    plik_wejsciowy>>x;
    plik_wejsciowy>>y;

    wiezienie=new Cela *[x+1];
    for(int i=1; i<=x; i++)
        wiezienie[i]=new Cela[y+1];

    for(int i=1; i<=x; i++)
    {
        for(int j=1; j<=y; j++)
        {
            plik_wejsciowy>>wiezienie[i][j].glebokosc_sufitu;
            cout<<wiezienie[i][j].glebokosc_sufitu<<" ";
        }
        cout<<endl;
    }


    plik_wejsciowy>>x_wiezien;
    plik_wejsciowy>>y_wiezien;

    czy_odwiedzone(x_wiezien,y_wiezien,x_wiezien,y_wiezien);

    fstream plik_wyjsciowy;
    plik_wyjsciowy.open("Odpowiedz.txt",std::ios::out);

    if (!plik_wyjsciowy)
    {
        cout<<"Nie udalo sie utworzyc pliku Odpowiedz.txt!Nastapi zamkniecie programu.";
        return -1;
    }
    else
    {
        plik_wyjsciowy<<ilosc_wody;
        cout<<"Poprawnie zapisano odpowiedz do pliku 'Odpowiedz.txt'"<<endl;
    }

    plik_wyjsciowy.close();
    plik_wejsciowy.close();
    return 0;
}
