#include <iostream>
#include <string>
#include <stdlib.h>
#include <list>

using namespace std;
class Druzyna
{
public:
    string Nazwa;
    int ID=0;
public:
    Druzyna()
    {
        Nazwa="Real Madryt";
        ID=-1;
    }

    Druzyna(string Nazwa_)
    {
        Nazwa=Nazwa_;
        ID++;

    }
    friend ostream & operator<< (ostream &os, const Druzyna &druzyna);
};
ostream & operator<< (ostream &os, const Druzyna &druzyna)
{
    return os <<druzyna.Nazwa <<" ID:"<<druzyna.ID;  //przeciazanie operatora wypisania do cout "<<"
}

class Sedzia
{
public:
    string Imie;
    string Nazwisko;
    int ID=0;
public:
    Sedzia()
    {
        Imie="Ryszard";
        Nazwisko="Lubicz";
        ID=-2;
    }

    Sedzia(string Imie_,string Nazwisko_)
    {
        Imie=Imie_;
        Nazwisko=Nazwisko_;
        ID++;

    }
    friend ostream & operator<< (ostream &os, const Sedzia &sedzia);

};

ostream & operator<< (ostream &os, const Sedzia &sedzia)
{
    return os <<sedzia.Imie <<" "<< sedzia.Nazwisko<<" ID:"<<sedzia.ID;  //przeciazanie operatora wypisania do cout "<<"
}

class Dyscyplina
{
public:
    list<Druzyna> Druzyny;
    list<Sedzia> Sedziowie;
    list<Sedzia>::iterator iter;
    list<Sedzia>::iterator iter1;
    list<Druzyna>::iterator iter2;
    list<Druzyna>::iterator iter3;


    void dodaj_sedzia(Sedzia sedz)
    {
        Sedziowie.push_front(sedz);
    }
    void usun_sedzia(int ID)
    {
        int ok=0;

        if( Sedziowie.empty () )
            cout<< "Lista sedziow jest pusta!"<<endl;
        else
        {
            iter=Sedziowie.begin();
            iter1=Sedziowie.end();
            if(ID<(iter->ID)||(ID>(iter1->ID)))
            {
                cout<<"Bledne ID"<<endl;
                return;
            }
            while (iter!=Sedziowie.end())
            {
                if (iter->ID==ID)
                {
                    Sedziowie.erase(iter);
                    cout<<"Usunieto sedziego o numerze ID:"<<ID<<endl;
                    ok=1;
                    break;

                }
            iter++;
            }
            if (ok!=1) cout<<"Nie udalo sie usunac sedziego o numerze ID:"<<ID<<endl;

        }
    };
    void dodaj_druzyna(Druzyna druz)
    {
        Druzyny.push_front(druz);
    }
    void usun_druzyna(int ID)
    {
        int ok1=0;

        if( Druzyny.empty () )
            cout<< "Lista druzyn jest pusta!"<<endl;
        else
        {
            iter2=Druzyny.begin();
            iter3=Druzyny.end();
            if(ID<(iter2->ID)||(ID>(iter3->ID)))
            {
                cout<<"Bledne ID"<<endl;
                return;
            }
            iter2=Druzyny.begin();
            while (iter2!=Druzyny.end())
            {
                if (iter2->ID==ID)
                {
                    Druzyny.erase(iter2);
                    cout<<"Usunieto druzyne o numerze ID:"<<ID<<endl;
                    ok1=1;
                    break;

                }
            iter2++;
            }
            if (ok1!=1) cout<<"Nie udalo sie usunac druzyny o numerze ID:"<<ID<<endl;

        }
    }
    void wyswietl_sedziow()
    {
        if( Sedziowie.empty () )
            cout<< "Lista sedziow jest pusta!"<<endl;
        else
        {
            for(  iter=Sedziowie.begin(); iter != Sedziowie.end(); iter++ )
            {
                cout<<*iter<<endl;
            }
        }
    }
    void wyswietl_druzyny()
    {
        if( Druzyny.empty () )
            cout<< "Lista druzyn jest pusta!"<<endl;
        else
        {
            for(  iter2=Druzyny.begin(); iter2 != Druzyny.end(); iter2++ )
            {
                cout<<*iter2<<endl;
            }
        }
    }


};

class Spotkanie
{
public:

    int Gospodarz;
    int Gosc;
    int Wynik=-1;
    bool Czy_Rozegrany;
    int Sedzia_Glowny;
    int Sedzia_Pom1;
    int Sedzia_Pom2;

    friend ostream & operator<< (ostream &os, const Spotkanie &mecz);

};

ostream & operator<< (ostream &os, const Spotkanie &mecz)
{
    return os <<mecz.Gospodarz <<" vs "<< mecz.Gosc<<"  "<<mecz.Wynik;  //przeciazanie operatora wypisania do cout "<<"
}

class Wyniki
{
public:
    list<Spotkanie>  Lista_Spotkan;
    list<Spotkanie>::iterator iter2;

    void wyswietl_wyniki()
    {
        if(Lista_Spotkan.empty () )
            cout<< "Lista spotkan jest pusta!"<<endl;
        else
        {
            for(  iter2=Lista_Spotkan.begin(); iter2 != Lista_Spotkan.end(); iter2++ )
            {
                cout<<*iter2<<endl;
            }
        }
    }

    void dodaj_wynik(int gosc,int gospodarz,int wynik)
    {
        int powodzenie=0;
        for(  iter2=Lista_Spotkan.begin(); iter2 != Lista_Spotkan.end(); iter2++ )
        {
            if (((iter2->Gospodarz)==gospodarz)&&((iter2->Gosc)==gosc))
            {
                iter2->Wynik=wynik;
                powodzenie=1;
            }

        }
        if (powodzenie!=1) cout<<"Dodawanie wyniku nie powiodlo sie"<<endl;
    }

    void stworz_terminarz()
    {

    }

    void wyswietl_terminarz()
    {

    }
    void generuj_polfinaly()
    {

    }
    void generuj_final()
    {

    }

};

class Dwa_ognie : public Dyscyplina
{

};

class Przeciaganie_liny : public Dyscyplina
{

};

class Siatkowka : public Dyscyplina
{
public:
    list<Sedzia> Sedziowie_glowni;
    list<Sedzia> Sedziowie_pom1;
    list<Sedzia> Sedzia_pom2;

    void dodaj_sedzia(Sedzia sedz)
    {

    }

};

class Rozgrywki
{
public:
    Siatkowka Siatka;
    Dwa_ognie Ognie;
    Przeciaganie_liny Lina;

    void Zapisz_na_dysk()
    {

    }

    void Odczyt_z_dysku()
    {

    }

};

int dajinta()
{
    int zmienna;
    while(!(cin>>zmienna)) //dopóki strumieñ jest w stanie b³êdu -> dopóki podawane s¹ b³êdne dane
    {
        cout<<"Nieprawidlowy klawisz"<<endl;
        cin.clear(); //kasowanie flagi b³êdu strumienia
        cin.sync(); //kasowanie zbêdnych znaków z bufora
    }
    return zmienna;
}

int podmenu()
{
    system("cls");
    int wybor;

    cout<<"1.Zarzadzanie sedziami"<<endl;
    cout<<"2.Zarzadzanie druzynami"<<endl;
    cout<<"3.Zarzadzanie rozgrywkami"<<endl;
    cout<<"4.Tabela wynikow"<<endl;
    cout<<"5.Zapis na dysk"<<endl;
    cout<<"6.Odczyt z dysku"<<endl;
    cout<<"7.Powrot"<<endl;

    do wybor=dajinta();
    while ((wybor!=1)&&(wybor!=2)&&(wybor!=3)&&(wybor!=4)&&(wybor!=5)&&(wybor!=6)&&(wybor!=7));
    return wybor;
}

void menu_sedziow(Dyscyplina* dyscyplina)
{
    system("cls");
    cout<<"1.Dodaj sedziego"<<endl;
    cout<<"2.Usun sedziego"<<endl;
    cout<<"3.Wyswietl sedziow"<<endl;
    cout<<"4.Wroc"<<endl;

    int wybor;
    do wybor=dajinta();
    while ((wybor!=1)&&(wybor!=2)&&(wybor!=3)&&(wybor!=4));

    switch(wybor)
    {

    case 1:
    {
        string imie,nazwisko;
        cout<<"Imie: ";
        cin>>imie;
        cout<<endl<<"Nazwisko: ";
        cin>>nazwisko;

        Sedzia sedzia(imie,nazwisko);

        dyscyplina->dodaj_sedzia(sedzia);
        cout<<endl<<"Poprawnie dodano sedziego. Jego ID: "<<sedzia.ID<<endl;
        system("pause");

        break;
    }
    case 2:
    {
        int id;
        cout<<"ID sedziego: ";
        id=dajinta();

        dyscyplina->usun_sedzia(id);

        system("pause");
        break;
    }
    case 3:
    {

        dyscyplina->wyswietl_sedziow();
        system("pause");

        break;
    }
    case 4:
    {
        return;
        break;
    }
    }
}

void menu_druzyn(Dyscyplina* dyscyplina)
{
    system("cls");
    cout<<"1.Dodaj druzyne"<<endl;
    cout<<"2.Usun druzyne"<<endl;
    cout<<"3.Wyswietl druzyny"<<endl;
    cout<<"4.Wroc"<<endl;

    int wybor;
    do wybor=dajinta();
    while ((wybor!=1)&&(wybor!=2)&&(wybor!=3)&&(wybor!=4));

    switch(wybor)
    {

    case 1:
    {
        string nazwa;
        cout<<"Imie: ";
        cin>>nazwa;


        Druzyna druzyna(nazwa);

        dyscyplina->dodaj_druzyna(druzyna);
        cout<<endl<<"Poprawnie dodano druzyne. Jej ID: "<<druzyna.ID<<endl;
        system("pause");

        break;
    }
    case 2:
    {
        int id;
        cout<<"ID druzyny: ";
        id=dajinta();

        dyscyplina->usun_druzyna(id);

        system("pause");
        break;
    }
    case 3:
    {

        dyscyplina->wyswietl_druzyny();
        system("pause");

        break;
    }
    case 4:
    {
        return;
        break;
    }
    }
}

void menu_lina_ogien(Dyscyplina* dyscyplina)
{

    int wybor=podmenu();

    switch(wybor)
    {
    case 1:
    {
        menu_sedziow(dyscyplina);
        break;
    }
    case 2:
    {
        menu_druzyn(dyscyplina);

        break;
    }
    case 7:
    {
        return;
        break;
    }

    }
};
int main()
{
    int dyscyplina;
    Przeciaganie_liny lina;
    Dwa_ognie ogien;
    Siatkowka siata;

    while(true)
    {
        system("cls");
        cout<<"WYBOR DYSCYPLINY"<<endl;
        cout<<"1.Przeciaganie liny"<<endl;
        cout<<"2.Dwa ognie"<<endl;
        cout<<"3.Siatkowka"<<endl;
        cout<<"4.Wyjscie"<<endl;

        do dyscyplina=dajinta();
        while ((dyscyplina!=1)&&(dyscyplina!=2)&&(dyscyplina!=3)&&(dyscyplina!=4));

        switch(dyscyplina)//od dyscyplin
        {

        case 1:
        {
            menu_lina_ogien(&lina);
            break;
        }
        case 2:
        {
            menu_lina_ogien(&ogien);
            break;
        }
        case 3:
        {
            //menu_siatka();
            break;
        }
        case 4:
        {
            exit(0);
        }

        }
    }
}
