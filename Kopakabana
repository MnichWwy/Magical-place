#include <iostream>
#include <string>
#include <stdlib.h>
#include <list>
#include <cstdlib>
#include <ctime>

int dajinta(int);
int podmenu();
void menu_sedziow();
void menu_druzyn();
void menu_lina_ogien_siatka();
void menu_rozgrywek();
bool czy_byla(int,int tab[],int);


using namespace std;
class Druzyna
{
public:
    string Nazwa;
    int ID=0;
public:
    Druzyna()
    {
        Nazwa="Real Madryt";
        ID=-1;
    }

    Druzyna(string Nazwa_)
    {
        Nazwa=Nazwa_;
        ID++;

    }
    friend ostream & operator<< (ostream &os, const Druzyna &druzyna);
};
ostream & operator<< (ostream &os, const Druzyna &druzyna)
{
    return os <<druzyna.Nazwa <<" ID:"<<druzyna.ID;  //przeciazanie operatora wypisania do cout "<<"
}

class Sedzia
{
public:
    string Imie;
    string Nazwisko;
    int ID=0;
public:
    Sedzia()
    {
        Imie="Ryszard";
        Nazwisko="Lubicz";
        ID=-2;
    }

    Sedzia(string Imie_,string Nazwisko_)
    {
        Imie=Imie_;
        Nazwisko=Nazwisko_;
        ID++;

    }
    friend ostream & operator<< (ostream &os, const Sedzia &sedzia);

};

ostream & operator<< (ostream &os, const Sedzia &sedzia)
{
    return os <<sedzia.Imie <<" "<< sedzia.Nazwisko<<" ID:"<<sedzia.ID;  //przeciazanie operatora wypisania do cout "<<"
}

class Dyscyplina
{
public:
    list<Druzyna> Druzyny;
    list<Sedzia> Sedziowie;
    list<Sedzia>::iterator iter;
    list<Sedzia>::iterator iter1;
    list<Druzyna>::iterator iter2;
    list<Druzyna>::iterator iter3;


    virtual void dodaj_sedzia(Sedzia sedz)
    {
        Sedziowie.push_front(sedz);
    }
    virtual void usun_sedzia(int ID)
    {
        int ok=0;

        if( Sedziowie.empty () )
            cout<< "Lista sedziow jest pusta!"<<endl;
        else
        {
            iter=Sedziowie.begin();
            iter1=Sedziowie.end();
            if(ID<(iter->ID)||(ID>(iter1->ID)))
            {
                cout<<"Bledne ID"<<endl;
                return;
            }
            while (iter!=Sedziowie.end())
            {
                if (iter->ID==ID)
                {
                    Sedziowie.erase(iter);
                    cout<<"Usunieto sedziego o numerze ID:"<<ID<<endl;
                    ok=1;
                    break;

                }
                iter++;
            }
            if (ok!=1) cout<<"Nie udalo sie usunac sedziego o numerze ID:"<<ID<<endl;

        }
    };
    void dodaj_druzyna(Druzyna druz)
    {
        Druzyny.push_front(druz);
    }
    void usun_druzyna(int ID)
    {
        int ok1=0;

        if( Druzyny.empty () )
            cout<< "Lista druzyn jest pusta!"<<endl;
        else
        {
            iter2=Druzyny.begin();
            iter3=Druzyny.end();
            if(ID<(iter2->ID)||(ID>(iter3->ID)))
            {
                cout<<"Bledne ID"<<endl;
                return;
            }
            iter2=Druzyny.begin();
            while (iter2!=Druzyny.end())
            {
                if (iter2->ID==ID)
                {
                    Druzyny.erase(iter2);
                    cout<<"Usunieto druzyne o numerze ID:"<<ID<<endl;
                    ok1=1;
                    break;

                }
                iter2++;
            }
            if (ok1!=1) cout<<"Nie udalo sie usunac druzyny o numerze ID:"<<ID<<endl;

        }
    }
    virtual void wyswietl_sedziow()
    {
        if( Sedziowie.empty () )
            cout<< "Lista sedziow jest pusta!"<<endl;
        else
        {
            for(  iter=Sedziowie.begin(); iter != Sedziowie.end(); iter++ )
            {
                cout<<*iter<<endl;
            }
        }
    }
    void wyswietl_druzyny()
    {
        if( Druzyny.empty () )
            cout<< "Lista druzyn jest pusta!"<<endl;
        else
        {
            for(  iter2=Druzyny.begin(); iter2 != Druzyny.end(); iter2++ )
            {
                cout<<*iter2<<endl;
            }
        }
    }


};

class Spotkanie
{
public:

    int Gospodarz;
    int Gosc;
    int Wynik=-1;
    bool Czy_Rozegrany;
    int Sedzia_Glowny;
    int Sedzia_Pom1;
    int Sedzia_Pom2;

    Spotkanie(int gosp,int gosc,int sedzia_glowny)
    {
        Gospodarz=gosp;
        Gosc=gosc;
        Sedzia_Glowny=sedzia_glowny;
    }

    Spotkanie(int gosp,int gosc,int sedzia_glowny,int sedzia_pom1,int sedzia_pom2)
    {
        Gospodarz=gosp;
        Gosc=gosc;
        Sedzia_Glowny=sedzia_glowny;
        Sedzia_Pom1=sedzia_pom1;
        Sedzia_Pom2=sedzia_pom2;
    }

    friend ostream & operator<< (ostream &os, const Spotkanie &mecz);

};

ostream & operator<< (ostream &os, const Spotkanie &mecz)
{
    return os <<mecz.Gospodarz <<" vs "<< mecz.Gosc<<"  "<<mecz.Wynik;  //przeciazanie operatora wypisania do cout "<<"
}

class Wyniki
{
public:
    list<Spotkanie>  Lista_Spotkan;
    list<Spotkanie>::iterator iter2;

   /* void wyswietl_wyniki()
    {
        if(Lista_Spotkan.empty () )
            cout<< "Lista spotkan jest pusta!"<<endl;
        else
        {
            for(  iter2=Lista_Spotkan.begin(); iter2 != Lista_Spotkan.end(); iter2++ )
            {
                cout<<*iter2<<endl;
            }
        }
    }*/

    void dodaj_wynik(int gosc,int gospodarz,int wynik)
    {
        int powodzenie=0;
        for(  iter2=Lista_Spotkan.begin(); iter2 != Lista_Spotkan.end(); iter2++ )
        {
            if (((iter2->Gospodarz)==gospodarz)&&((iter2->Gosc)==gosc))
            {
                iter2->Wynik=wynik;
                powodzenie=1;
                break;
            }

        }
        if (powodzenie!=1) cout<<"Dodawanie wyniku nie powiodlo sie"<<endl;
    }

    void stworz_terminarz(list<Druzyna>* Druzyny,list<Sedzia>* Sedziowie)
    {
        list<Druzyna> *pomocnicza_druzyny=Druzyny;
        list<Sedzia> *pomocnicza_sedziowie=Sedziowie;
        list<Sedzia>::iterator iter1=pomocnicza_sedziowie->begin();
        list<Druzyna>::iterator iter0=pomocnicza_druzyny->begin();
        list<Druzyna>::iterator iter3;
        list<Druzyna>::iterator iter4=Druzyny->begin();
        list<Druzyna>::iterator iter5=Druzyny->end();
        srand( time( NULL ) );

    if(!Lista_Spotkan.empty () )
            cout<< "Terminarz zostal juz wygenerowany!"<<endl;
        else
        {
            if (Druzyny->begin()==Druzyny->end()) {cout<<"Tylko jedna druzyna na liscie!"<<endl;system("pause");return;}
            if (Sedziowie->empty()) {cout<<"Lista sedziow jest pusta!"<<endl;system("pause");return;}

                    int gosp_i_gosc[(iter5->ID)];
                    int wylosowanych = 0;
                do
    {
        int tmp = ( rand()%((iter5->ID)))+1;;
        if( czy_byla( tmp, gosp_i_gosc, wylosowanych ) == false )
        {
            gosp_i_gosc[ wylosowanych ] = tmp;
            wylosowanych++;
        } //if
    } while( wylosowanych < ((iter5->ID)));//tu sie konczy losowanie tablicy unikalnych gospodarzy i gosci

                    int sedziowie[((Sedziowie->end())->ID)];
                    int wylosowanych1 = 0;
                do
    {
        int tmp1 = ( rand()%(((Sedziowie->end())->ID))+1);
        if( czy_byla( tmp1, sedziowie, wylosowanych1 ) == false )
        {
            sedziowie[ wylosowanych1 ] = tmp1;
            wylosowanych1++;
        } //if
    } while( wylosowanych1 < (((Sedziowie->end())->ID)));//tu sie konczy losowanie tablicy unikalnych sedziow

            int i,j,k=0;
            for (i=0;i!=j;i++)
            {
                for (j=wylosowanych;j==(wylosowanych/2);j--)
                {
                Spotkanie mecz(gosp_i_gosc[i],gosp_i_gosc[j],sedziowie[k]);
                Lista_Spotkan.push_front(mecz);
                if (k<wylosowanych1) {k++;}
                }
            }




            }
                //iter2->Gospodarz=

return;
        }



    void wyswietl_terminarz()
    {
        if(Lista_Spotkan.empty () )
            cout<< "Lista spotkan jest pusta!"<<endl;
        else
        {
            for(  iter2=Lista_Spotkan.begin(); iter2 != Lista_Spotkan.end(); iter2++ )
            {
                cout<<*iter2<<endl;
            }
        }
    }
    void generuj_polfinaly()
    {

    }
    void generuj_final()
    {

    }

friend bool czy_unikalna(int , int tab[], int);
};

class Dwa_ognie : public Dyscyplina
{

};

class Przeciaganie_liny : public Dyscyplina
{

};

class Siatkowka : public Dyscyplina
{
public:
    list<Sedzia> Sedziowie_glowni;
    list<Sedzia> Sedziowie_pom1;
    list<Sedzia> Sedziowie_pom2;

    virtual void dodaj_sedzia(Sedzia sedz)
    {
        cout<<"Jakiego sedziego siatkowki chcesz dodac?"<<endl;
        cout<<"1.Sedzia glowny"<<endl;
        cout<<"2.Sedzia pomocniczy pierwszy"<<endl;
        cout<<"3.Sedzia pomocniczy drugi"<<endl;

        int tmp;
        //do dajinta(tmp);
        do
        {
            while(!(cin>>tmp)) //dopóki strumieñ jest w stanie b³êdu -> dopóki podawane s¹ b³êdne dane
            {
                cout<<"Nieprawidlowy klawisz"<<endl;
                cin.clear(); //kasowanie flagi b³êdu strumienia
                cin.sync(); //kasowanie zbêdnych znaków z bufora
            }
        }
        while ((tmp!=1)&&(tmp!=2)&&(tmp!=3));

        switch (tmp)
        {
        case 1:
        {
            Sedziowie_glowni.push_front(sedz);
            break;
        }
        case 2:
        {
            Sedziowie_pom1.push_front(sedz);
            break;
        }
        case 3:
        {
            Sedziowie_pom2.push_front(sedz);
            break;
        }
        }

    }

    virtual void usun_sedzia(int ID)
    {
        int ok=0;

        cout<<"Jakiego sedziego siatkowki chcesz usunac?"<<endl;
        cout<<"1.Sedzia glowny"<<endl;
        cout<<"2.Sedzia pomocniczy pierwszy"<<endl;
        cout<<"3.Sedzia pomocniczy drugi"<<endl;

        int tmp;
        do
        {
            while(!(cin>>tmp)) //dopóki strumieñ jest w stanie b³êdu -> dopóki podawane s¹ b³êdne dane
            {
                cout<<"Nieprawidlowy klawisz"<<endl;
                cin.clear(); //kasowanie flagi b³êdu strumienia
                cin.sync(); //kasowanie zbêdnych znaków z bufora
            }
        }
        while ((tmp!=1)&&(tmp!=2)&&(tmp!=3));


        switch(tmp)
        {

        case 1:
        {
            if( Sedziowie_glowni.empty () )
                cout<< "Lista sedziow jest pusta!"<<endl;
            else
            {
                iter=Sedziowie_glowni.begin();
                iter1=Sedziowie_glowni.end();
                if(ID<(iter->ID)||(ID>(iter1->ID)))
                {
                    cout<<"Bledne ID"<<endl;
                    return;
                }
                while (iter!=Sedziowie_glowni.end())
                {
                    if (iter->ID==ID)
                    {
                        Sedziowie_glowni.erase(iter);
                        cout<<"Usunieto sedziego o numerze ID:"<<ID<<endl;
                        ok=1;
                        break;

                    }
                    iter++;
                }
                if (ok!=1) cout<<"Nie udalo sie usunac sedziego o numerze ID:"<<ID<<endl;
            }
            break;
        }

        case 2:
        {
            if( Sedziowie_pom1.empty () )
                cout<< "Lista sedziow jest pusta!"<<endl;
            else
            {
                iter=Sedziowie_pom1.begin();
                iter1=Sedziowie_pom1.end();
                if(ID<(iter->ID)||(ID>(iter1->ID)))
                {
                    cout<<"Bledne ID"<<endl;
                    return;
                }
                while (iter!=Sedziowie_pom1.end())
                {
                    if (iter->ID==ID)
                    {
                        Sedziowie_pom1.erase(iter);
                        cout<<"Usunieto sedziego o numerze ID:"<<ID<<endl;
                        ok=1;
                        break;

                    }
                    iter++;
                }
                if (ok!=1) cout<<"Nie udalo sie usunac sedziego o numerze ID:"<<ID<<endl;
            }
            break;
        }

        case 3:
        {
            if( Sedziowie_pom2.empty () )
                cout<< "Lista sedziow jest pusta!"<<endl;
            else
            {
                iter=Sedziowie_pom2.begin();
                iter1=Sedziowie_pom2.end();
                if(ID<(iter->ID)||(ID>(iter1->ID)))
                {
                    cout<<"Bledne ID"<<endl;
                    return;
                }
                while (iter!=Sedziowie_pom2.end())
                {
                    if (iter->ID==ID)
                    {
                        Sedziowie_pom2.erase(iter);
                        cout<<"Usunieto sedziego o numerze ID:"<<ID<<endl;
                        ok=1;
                        break;

                    }
                    iter++;
                }
                if (ok!=1) cout<<"Nie udalo sie usunac sedziego o numerze ID:"<<ID<<endl;
            }
            break;
        }

        }
    };

    virtual void wyswietl_sedziow()
    {
        cout<<"Jakich sedziow siatkowki chcesz wyswietlic?"<<endl;
        cout<<"1.Sedzia glowny"<<endl;
        cout<<"2.Sedzia pomocniczy pierwszy"<<endl;
        cout<<"3.Sedzia pomocniczy drugi"<<endl;

        int tmp;
        do
        {
            while(!(cin>>tmp)) //dopóki strumieñ jest w stanie b³êdu -> dopóki podawane s¹ b³êdne dane
            {
                cout<<"Nieprawidlowy klawisz"<<endl;
                cin.clear(); //kasowanie flagi b³êdu strumienia
                cin.sync(); //kasowanie zbêdnych znaków z bufora
            }
        }
        while ((tmp!=1)&&(tmp!=2)&&(tmp!=3));


        switch(tmp)
        {

        case 1:
        {
            if( Sedziowie_glowni.empty () )
                cout<< "Lista sedziow glownych jest pusta!"<<endl;
            else
            {
                for(  iter=Sedziowie_glowni.begin(); iter != Sedziowie_glowni.end(); iter++ )
                {
                    cout<<*iter<<endl;
                }
            }
            break;
        }
        case 2:
        {
            if( Sedziowie_pom1.empty () )
                cout<< "Lista pierwszych sedziow pomocniczych jest pusta!"<<endl;
            else
            {
                for(  iter=Sedziowie_pom1.begin(); iter != Sedziowie_pom1.end(); iter++ )
                {
                    cout<<*iter<<endl;
                }
            }
            break;
        }
        case 3:
        {
            if( Sedziowie_pom2.empty () )
                cout<< "Lista drugich sedziow pomocniczych jest pusta!"<<endl;
            else
            {
                for(  iter=Sedziowie_pom2.begin(); iter != Sedziowie_pom2.end(); iter++ )
                {
                    cout<<*iter<<endl;
                }
            }
            break;
        }
        }

    }
};

    class Rozgrywki
    {
    public:
        Siatkowka Siatka;
        Dwa_ognie Ognie;
        Przeciaganie_liny Lina;

        void Zapisz_na_dysk()
        {

        }

        void Odczyt_z_dysku()
        {

        }

    };

        bool czy_byla(int liczba, int tab[], int ile)
        {
            if (ile<=0) return false;
            int i=0;
            do
            {
                if (tab[i]==liczba) return true;
                i++;
            }while (i<ile);
            return false;
        }


    int dajinta()
    {
        int zmienna;
        while(!(cin>>zmienna)) //dopóki strumieñ jest w stanie b³êdu -> dopóki podawane s¹ b³êdne dane
        {
            cout<<"Nieprawidlowy klawisz"<<endl;
            cin.clear(); //kasowanie flagi b³êdu strumienia
            cin.sync(); //kasowanie zbêdnych znaków z bufora
        }
        return zmienna;
    }

    int podmenu()
    {
        system("cls");
        int wybor;

        cout<<"1.Zarzadzanie sedziami"<<endl;
        cout<<"2.Zarzadzanie druzynami"<<endl;
        cout<<"3.Zarzadzanie rozgrywkami"<<endl;
        cout<<"4.Tabela wynikow"<<endl;
        cout<<"5.Zapis na dysk"<<endl;
        cout<<"6.Odczyt z dysku"<<endl;
        cout<<"7.Powrot"<<endl;

        do wybor=dajinta();
        while ((wybor!=1)&&(wybor!=2)&&(wybor!=3)&&(wybor!=4)&&(wybor!=5)&&(wybor!=6)&&(wybor!=7));
        return wybor;
    }

    void menu_sedziow(Dyscyplina* dyscyplina)
    {
        system("cls");
        cout<<"1.Dodaj sedziego"<<endl;
        cout<<"2.Usun sedziego"<<endl;
        cout<<"3.Wyswietl sedziow"<<endl;
        cout<<"4.Wroc"<<endl;

        int wybor;
        do wybor=dajinta();
        while ((wybor!=1)&&(wybor!=2)&&(wybor!=3)&&(wybor!=4));

        switch(wybor)
        {

        case 1:
        {
            string imie,nazwisko;
            cout<<"Imie: ";
            cin>>imie;
            cout<<endl<<"Nazwisko: ";
            cin>>nazwisko;

            Sedzia sedzia(imie,nazwisko);

            dyscyplina->dodaj_sedzia(sedzia);
            cout<<endl<<"Poprawnie dodano sedziego. Jego ID: "<<sedzia.ID<<endl;
            system("pause");

            break;
        }
        case 2:
        {
            int id;
            cout<<"ID sedziego: ";
            id=dajinta();

            dyscyplina->usun_sedzia(id);

            system("pause");
            break;
        }
        case 3:
        {

            dyscyplina->wyswietl_sedziow();
            system("pause");

            break;
        }
        case 4:
        {
            return;
            break;
        }
        }
    }

    void menu_druzyn(Dyscyplina* dyscyplina)
    {
        system("cls");
        cout<<"1.Dodaj druzyne"<<endl;
        cout<<"2.Usun druzyne"<<endl;
        cout<<"3.Wyswietl druzyny"<<endl;
        cout<<"4.Wroc"<<endl;

        int wybor;
        do wybor=dajinta();
        while ((wybor!=1)&&(wybor!=2)&&(wybor!=3)&&(wybor!=4));

        switch(wybor)
        {

        case 1:
        {
            string nazwa;
            cout<<"Nazwa: ";
            cin>>nazwa;


            Druzyna druzyna(nazwa);

            dyscyplina->dodaj_druzyna(druzyna);
            cout<<endl<<"Poprawnie dodano druzyne. Jej ID: "<<druzyna.ID<<endl;
            system("pause");

            break;
        }
        case 2:
        {
            int id;
            cout<<"ID druzyny: ";
            id=dajinta();

            dyscyplina->usun_druzyna(id);

            system("pause");
            break;
        }
        case 3:
        {

            dyscyplina->wyswietl_druzyny();
            system("pause");

            break;
        }
        case 4:
        {
            return;
            break;
        }
        }
    }

    void menu_lina_ogien_siatka(Wyniki* wyniki,Dyscyplina* dyscyplina,list<Sedzia>* Sedziowie,list<Druzyna>* Druzyny)
    {

        int wybor=podmenu();

        switch(wybor)
        {
        case 1:
        {
            menu_sedziow(dyscyplina);
            break;
        }
        case 2:
        {
            menu_druzyn(dyscyplina);
            break;
        }
        case 3:
        {
            menu_rozgrywek(wyniki,dyscyplina,Druzyny,Sedziowie);
            break;
        }
        case 7:
        {
            return;
            break;
        }

        }
    };

    void menu_rozgrywek(Wyniki* wyniki,Dyscyplina* dyscyplina,list<Druzyna>* Druzyny,list<Sedzia>* Sedziowie)
    {

               system("cls");
        cout<<"1.Wygeneruj terminarz"<<endl;
        cout<<"2.Dodaj wynik dla wybranego spotkania"<<endl;
        cout<<"3.Generuj polfinaly"<<endl;
        cout<<"4.Wroc"<<endl;

        int wybor;
        do wybor=dajinta();
        while ((wybor!=1)&&(wybor!=2)&&(wybor!=3)&&(wybor!=4));

        switch(wybor)
        {

        case 1:
        {
            wyniki.stworz_terminarz(Druzyny,Sedziowie);




            cout<<endl<<"Poprawnie dodano druzyne. Jej ID: "<<druzyna.ID<<endl;
            system("pause");

            break;
        }
        case 2:
        {
            int id;
            cout<<"ID druzyny: ";
            id=dajinta();

            dyscyplina->usun_druzyna(id);

            system("pause");
            break;
        }
        case 3:
        {

            dyscyplina->wyswietl_druzyny();
            system("pause");

            break;
        }
        case 4:
        {
            return;
            break;
        }
        }
    }






    };


    int main()
    {
        int dyscyplina;
        Przeciaganie_liny lina;
        Dwa_ognie ogien;
        Siatkowka siata;
        Wyniki wyniki;


        while(true)
        {
            system("cls");
            cout<<"WYBOR DYSCYPLINY"<<endl;
            cout<<"1.Przeciaganie liny"<<endl;
            cout<<"2.Dwa ognie"<<endl;
            cout<<"3.Siatkowka"<<endl;
            cout<<"4.Wyjscie"<<endl;

            do dyscyplina=dajinta();
            while ((dyscyplina!=1)&&(dyscyplina!=2)&&(dyscyplina!=3)&&(dyscyplina!=4));

            switch(dyscyplina)//od dyscyplin
            {

            case 1:
            {
                menu_lina_ogien_siatka(&lina);
                break;
            }
            case 2:
            {
                menu_lina_ogien_siatka(&ogien);
                break;
            }
            case 3:
            {
                menu_lina_ogien_siatka(&siata);
                break;
            }
            case 4:
            {
                exit(0);
            }

            }
        }
    }
